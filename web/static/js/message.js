/**
 * This file provided by Facebook is for non-commercial testing and evaluation
 * purposes only. Facebook reserves all rights not expressly granted.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
import React from "react"
import ReactDOM from "react-dom"
import {Socket} from "phoenix"

let socket = new Socket("/socket", {params: {token: "g3QAAAACZAAEZGF0YWEDZAAGc2lnbmVkbgYAwt4AM1YB##IGcqzHduFTykBTaYuXb9VGoazv4="}})
socket.connect()
// Now that you are connected, you can join channels with a topic:
let channel = socket.channel("room:lobby", {})
channel.join()
  .receive("ok", resp => { console.log("Joined successfully", resp) })
  .receive("error", resp => { console.log("Unable to join", resp) })


var Comment = React.createClass({
  rawMarkup: function() {
    var md = new Remarkable();
    var rawMarkup = md.render(this.props.children.toString());
    return { __html: rawMarkup };
  },

  render: function() {
    return (
      <div className="comment">
        <span style={{fontWeight: "bold"}}>{this.props.author}</span>:
        <span dangerouslySetInnerHTML={this.rawMarkup()} />
      </div>
    );
  }
});

var CommentBox = React.createClass({
  loadCommentsFromServer: function() {    
    channel.on("new_msg", payload => {
      var comments = this.state.data
      var comment = {id: Date.now(), text: payload.body, author: payload.author}
      var newComments = comments.concat([comment])
      this.setState({data: newComments});
  //    messagesContainer.append(`<br/>[${Date()}] ${payload.body}`)
    })    
  },
  handleCommentSubmit: function(comment) {
    var comments = this.state.data
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now()
    var newComments = comments.concat([comment])
//    this.setState({data: newComments});
    channel.push("new_msg", {body: comment.text, author: comment.author, token: comment.token})    
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadCommentsFromServer();
  },
  render: function() {
    return (
      <div className="commentBox">
        <h1>Comments</h1>
        <CommentList data={this.state.data} />
        <CommentForm onCommentSubmit={this.handleCommentSubmit} />
      </div>
    );
  }
});

var CommentList = React.createClass({
  render: function() {
    var commentNodes = this.props.data.map(function(comment) {
      return (
        <Comment author={comment.author} key={comment.id}>
          {comment.text}
        </Comment>
      );
    });
    return (
      <div className="commentList">
        {commentNodes}
      </div>
    );
  }
});

var CommentForm = React.createClass({
  getInitialState: function() {
    return {author: '', text: '', token: ''};
  },
  handleTokenChange: function(e) {
    this.setState({token: e.target.value});
  },
  handleAuthorChange: function(e) {
    this.setState({author: e.target.value});
  },
  handleTextChange: function(e) {
    this.setState({text: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var author = this.state.author.trim();
    var text = this.state.text.trim();
    var token = this.state.token.trim();
    if (!text || !author || !token) {
      return;
    }
    this.props.onCommentSubmit({author: author, text: text, token: token});
    this.setState({author: author, text: '', token: token});
  },
  render: function() {
    return (
      <form className="commentForm" onSubmit={this.handleSubmit}>
        <input
          type="text"
          placeholder="Your token"
          value={this.state.token}
          onChange={this.handleTokenChange}
        />
        <input
          type="text"
          placeholder="Your name"
          value={this.state.author}
          onChange={this.handleAuthorChange}
        />
        <input
          type="text"
          placeholder="Say something..."
          value={this.state.text}
          onChange={this.handleTextChange}
        />
        <input type="submit" value="Post" />
      </form>
    );
  }
});

/*
creare nuovo componente alternativo che si mostra quando utente nn loggato
passare il suo sato=token + email come props dell altro comp
inizializzare comp dei commenti con il socket + token
*/

ReactDOM.render(
  <CommentBox/>,
  document.getElementById('content')
);

export default socket
